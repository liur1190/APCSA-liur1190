import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
//import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.awt.Font;


//import java.awt.event.ActionListener;

public class Pong extends Canvas implements KeyListener, Runnable
{
		
	/**
	 * IF YOU WANT TO PLAY     SPEED-UP BALL  	TYPE 'a' IN "PLAY" INSTANCE
	 * IF YOU WANT TO PLAY    BLINKY BALL	TYPE 'c' IN "PLAY" INSTANCE
	 * IF YOU WANT TO PLAY       REGULAR BALL       TYPE 'r' IN "PLAY" INSTANCE
	 */
	
	
	char play = 'c';
	
	
	
	//instance variables
	private static final long serialVersionUID = 1L;
	
	private Ball ball;
	private ArrayList<Tile> topTiles;
	private ArrayList<Tile> bottomTiles;
	private ArrayList<Tile> leftTiles;
	private ArrayList<Tile> rightTiles;
	private Paddle paddle;
	private Wall wall;
	
	private int timer = 0;
	
	private boolean[] keys;
	private BufferedImage back;
		

	//starting position of ball
	private static final int BALL_Xi = 380;
	private static final int BALL_Yi = 265;
	
	public Pong()
	{
		createBall();
		
		
		paddle = new Paddle(760, 244, 40, 40, Color.PINK, 4);
		wall = new Wall(0, 770, 10, 550);
		keys = new boolean[4];
		topTiles = new ArrayList<Tile>();
		bottomTiles = new ArrayList<Tile>();
		leftTiles = new ArrayList<Tile>();
		rightTiles = new ArrayList<Tile>();
		
    	setBackground(Color.WHITE);
		setVisible(true);
		
		new Thread(this).start();
		addKeyListener(this);		
	}
	
	
	public void createBall() {
		if(play == 'a') ball = new SpeedUpBall(BALL_Xi, BALL_Yi, 10, 10, Color.darkGray, 1, 1);
		else if(play == 'c') ball = new BlinkyBall(BALL_Xi, BALL_Yi, 10, 10, Color.darkGray, 3, 1);
		else if(play == 'r') ball = new Ball(BALL_Xi, BALL_Yi, 10, 10, Color.darkGray, 3, 1);
	}
	
	public void subIncSpeed() {
		timer++;
		if(timer == 4) {
			((SpeedUpBall)ball).incSpeed();
			timer = 0;
		}
	}
	
	public void update(Graphics window){
		paint(window);
	}

   	public void paint(Graphics window)
   	{
		//set up the double buffering to make the game animation nice and smooth
		Graphics2D twoDGraph = (Graphics2D) window;

		//take a snap shop of the current screen and save it as an image
		//that is the exact same width and height as the current screen
		if(back == null)
		   back = (BufferedImage)(createImage(getWidth(),getHeight()));

		//create a graphics reference to the back ground image
		//we will draw all changes on the background image
		Graphics graphToBack = back.createGraphics();
		


		ball.moveAndDraw(graphToBack);
		paddle.draw(graphToBack);
		for (int i = 0; i < 760; i+=40)
		{
			topTiles.add(new Tile(i, 0, 40, 20, Color.RED));
			topTiles.add(new Tile(i, 20, 40, 20, Color.ORANGE));
			bottomTiles.add(new Tile(i, 560, 40, 20, Color.BLUE));
			bottomTiles.add(new Tile(i, 540, 40, 20, Color.CYAN));
		}
		
		for (int j = 0; j < 760; j+=40)
		{
			leftTiles.add(new Tile(0,j,20,40,Color.PINK));
			leftTiles.add(new Tile(20, j, 20, 40, Color.magenta));
			rightTiles.add(new Tile(560, j, 20, 40, Color.YELLOW));
			rightTiles.add(new Tile(540, j, 20, 40, Color.GREEN));
		}
		
		for (Tile t: topTiles)
		{
			t.draw(graphToBack);
		}
		for (Tile t: rightTiles)
		{
			t.draw(graphToBack);
		}
		for (Tile t: bottomTiles)
		{
			t.draw(graphToBack);
		}
		for (Tile t: leftTiles)
		{
			t.draw(graphToBack);
		}
		

		//graphToBack.setColor(Color.RED);
		//graphToBack.drawLine(0, wall.getBottom(), 800, wall.getBottom());
		

		graphToBack.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 20));
		//graphToBack.clearRect(52, 556, 708, 248);
		graphToBack.setColor(Color.GRAY);
		

		if(ball.didCollideLeft(wall)) {
			
			ball.setXSpeed(-ball.getXSpeed());

		}
			
		if(ball.didCollideRight(wall)) {
			
			
			ball.setXSpeed(-ball.getXSpeed());
			
		}
		
		if(ball.didCollideTop(wall))
		{
			ball.setYSpeed(-ball.getYSpeed());
		}
		
		if(ball.didCollideBottom(wall))
		{
			ball.setYSpeed(-ball.getYSpeed());
		}
			
		
		

		

		//checking if ball hits paddle
		if(ball.getX() >= paddle.getX()-paddle.getWidth()
				&& ball.getY() >= paddle.getY()
				&& (ball.getY() <= paddle.getY()+paddle.getHeight()
				|| ball.getY()+ball.getHeight() >= paddle.getY()
				&& ball.getY()+ball.getHeight() < paddle.getY()+paddle.getHeight()))
		{
		
			if(ball.getX() >= paddle.getX()-paddle.getWidth()+Math.abs(ball.getXSpeed()))
				ball.setYSpeed(-ball.getYSpeed());
			
			//else
				ball.setXSpeed(-ball.getXSpeed());
			if(play == 'a') subIncSpeed();
		}
		//checking if ball hits paddle 2.0
		/**if(ball.didCollideRight(paddle))
			ball.setXSpeed(-ball.getXSpeed());
		
		if(ball.didCollideLeft(paddle))
			ball.setXSpeed(-ball.getXSpeed());
		
		if(ball.didCollideTop(paddle))
			ball.setYSpeed(-ball.getYSpeed());
		
		if(ball.didCollideBottom(paddle))
			ball.setYSpeed(-ball.getYSpeed());**/
		
		

		
		if(keys[0] == true) {
			paddle.moveLeftAndDraw(graphToBack);
		}
		if(keys[1] == true) {
			paddle.moveRightAndDraw(graphToBack);
		}
			
		if(keys[2] == true) {
			paddle.moveUpAndDraw(graphToBack);
		}
		if(keys[3] == true) {
			paddle.moveDownAndDraw(graphToBack);
		}
		
		twoDGraph.drawImage(back, null, 0, 0);
   	}
  	
   	public void keyPressed(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = true;
		}
		
		//repaint();
	}

	public void keyReleased(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = false;
		}
		
		//repaint();
	}

	public void keyTyped(KeyEvent e){}
   	

  	public void run()
  	{
  		try 
  		{
  			while(true) 
  			{
	  			Thread.currentThread();
				Thread.sleep(8);
				repaint();
	  		}
	  	} catch (Exception e){
	  		System.out.println("oops");
	  	}
    }
}