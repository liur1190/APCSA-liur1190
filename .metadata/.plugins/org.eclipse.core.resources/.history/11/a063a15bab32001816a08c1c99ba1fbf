//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class - 
//Lab  - 

import static java.lang.System.*;

import java.lang.reflect.Array;
import java.util.Arrays;		//use Arrays.toString() to help print out the array

public class QuickSort
{
	private static int passCount;

	public static void quickSort(Comparable[] list)
	{
		//call quicksort on the left side
		//call quicksort on the right side
		quickSort(list, 0, list.length-1);
		out.println(String.format("Done: %s", String.format(Arrays.toString(list))));
	}


	private static void quickSort(Comparable[] list, int low, int high)
	{
		if (low < high)
		{
			int split = partition(list, low, high);
			System.out.println(String.format("Pass: %d", list));
			quickSort(list, low, split-1);
			quickSort(list, split, high);
		}


	}


	private static int partition(Comparable[] list, int low, int high)
	{
		int pivot;
		Comparable c_pivot;
		Comparable c_right;
		Comparable c_left;
		while (low < high)
		{
			//move the pivot to the top and move the bottom upwards
			pivot = high;
			c_pivot = list[pivot];
			c_left = list[low];
			while (c_left.compareTo(c_pivot) < 0)
			{
				//raising the bottom
				low++;
				c_left = list[low]; //updating
			}
			if (low < pivot)
			{
				//swapping bottom and pivot
				list[pivot] = c_left;
				list[low] = c_pivot;
			}
			//move the pivot to the bottom and move the top downwards
			pivot = low;
			c_pivot = list[pivot];
			c_right = list[high];
			while (c_right.compareTo(c_pivot) > 0)
			{
				//lowering the top
				high--;
				c_right = list[high]; // updating
			}
			if (pivot < high)
			{
				//swapping pivot and top
				list[pivot] = c_right;
				list[high] = c_pivot;
			}
		}

		return high;
	}
}